---
import type { ActiveProgram } from "@types";

interface Props {
  channelId: string;
  activeProgram?: ActiveProgram | null;
}

const { activeProgram } = Astro.props;
const { program, startTime, endTime } = activeProgram ?? {};
const { title, url } = program ?? {};

// Fetch initial visitor data
let initialVisitorData = { total: 0, history: Array(8).fill(0) };
try {
  const response = await fetch("/api/visitors");
  if (response.ok) {
    initialVisitorData = await response.json();
  }
} catch (error) {
  console.error("Failed to fetch initial visitor data:", error);
}

const BAR_WIDTH = 3;
const BAR_GAP = 2;
const SVG_HEIGHT = 10;
const MIN_HEIGHT = 2;
const SOFT_MIN = 5;

// Calculate SVG width dynamically based on bar width and gap
const calculateSvgWidth = (totalBars: number) => {
  return BAR_WIDTH * totalBars + BAR_GAP * (totalBars - 1);
};

function generateBars(history: number[]) {
  const maxValue = Math.max(...history, SOFT_MIN);

  return history
    .map((point, i) => {
      const availableHeight = SVG_HEIGHT - MIN_HEIGHT;
      const scaledHeight =
        point <= SOFT_MIN
          ? MIN_HEIGHT + availableHeight * (point / SOFT_MIN)
          : SVG_HEIGHT * (1 - (point - SOFT_MIN) / (maxValue - SOFT_MIN));
      const barHeight = Math.max(MIN_HEIGHT, scaledHeight);
      const x = i * (BAR_WIDTH + BAR_GAP);
      const y = SVG_HEIGHT - barHeight;

      return `<rect x="${x}" y="${y}" width="${BAR_WIDTH}" height="${barHeight}" rx="1" fill="currentColor" />`;
    })
    .join("");
}

function getReadableTime(timeStr: string | undefined) {
  if (!timeStr) return "00:00";

  // Create a new date and set it to the time from the string
  const [hours, minutes] = timeStr.split(":").map(Number);
  const date = new Date();
  date.setUTCHours(hours, minutes, 0, 0);

  return date.toLocaleTimeString("en-US", {
    hour: "2-digit",
    minute: "2-digit",
    hour12: true,
  });
}

const readableEndTime = getReadableTime(endTime)?.split(" ")[0];
const isAm = getReadableTime(endTime)?.split(" ")[1] === "AM";

const isAiring = Boolean(startTime && endTime) && program !== null;

const svgWidth = calculateSvgWidth(initialVisitorData.history.length);
---

<channel-display
  data-title={title}
  data-url={url}
  data-power="on"
  data-initial-visitors={JSON.stringify(initialVisitorData)}
>
  <header class="display">
    <div
      class="title"
      data-title={title}
      data-scroll={Boolean((title?.length ?? 0) > 17)}
    >
      <span class="title-contents">
        {
          program && program.url ? (
            <a href={url}>{title?.slice(0, 17)}</a>
          ) : program ? (
            <span>{title?.slice(0, 17)}</span>
          ) : (
            <span>Nothing scheduled</span>
          )
        }
      </span>
      <span class="title-background" aria-hidden="true">#################</span>
    </div>

    <div class="secondary">
      <div class="airing-container">
        <div
          class="airing"
          data-active={isAiring || title === "What's Airing Now"}
        >
          <div class="airing-indicator"></div>
          Live
        </div>
        <div class="times">
          <span data-active={isAiring}>Until</span>
          <time datetime={endTime} data-active={isAiring}>
            {readableEndTime}
          </time>
          <span
            class="am-pm am"
            data-active={Boolean(isAm && isAiring)}
            aria-hidden={Boolean(!isAm || !isAiring)}
          >
            AM
          </span>
          <span
            class="am-pm pm"
            data-active={Boolean(!isAm && isAiring)}
            aria-hidden={Boolean(isAm || !isAiring)}
          >
            PM
          </span>
        </div>
      </div>
      <div id="visitors" data-active="true">
        <svg class="visitor-trend" width={svgWidth} height="15">
          <g
            class="trend-bars"
            set:html={generateBars(initialVisitorData.history)}
          />
        </svg>
        <span class="count">{initialVisitorData.total}</span> watching
      </div>
    </div>
  </header>
</channel-display>

<script>
  class ChannelDisplay extends HTMLElement {
    intervalId: NodeJS.Timer | null = null;
    timeoutId: NodeJS.Timeout | null = null;
    private eventSource: EventSource | null = null;
    isOnline: boolean = true;
    private visitorHistory: number[] = [];
    private trendBars: SVGGElement | null = null;
    private svgElement: SVGElement | null = null;
    private readonly MAX_POINTS = 8;
    private readonly BAR_WIDTH = 3;
    private readonly BAR_GAP = 2;

    constructor() {
      super();

      // Initialize visitor history from server-side data
      try {
        const initialData = JSON.parse(
          this.dataset.initialVisitors || '{"total": 0, "history": []}',
        );
        this.visitorHistory =
          initialData.history.length > 0
            ? initialData.history
            : new Array(this.MAX_POINTS).fill(0);

        // Update the visitor count display immediately
        const countElement = this.querySelector("#visitors .count");
        if (countElement) {
          countElement.textContent = initialData.total.toString();
        }
      } catch (error) {
        console.error("Failed to parse initial visitor data:", error);
        this.visitorHistory = new Array(this.MAX_POINTS).fill(0);
      }
    }

    private setupLiveUpdates() {
      if (this.eventSource) {
        this.eventSource.close();
      }

      this.eventSource = new EventSource("/api/visitors");

      this.eventSource.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          this.updateVisitorHistory(data.history, data.total);
          this.updateSparkline();

          // Update the count display
          const countElement = this.querySelector("#visitors .count");
          if (countElement) {
            countElement.textContent = data.total.toString();
          }

          // Update active state
          this.updateVisitorActiveState(data.total);
        } catch (error) {
          console.error("Error parsing SSE data:", error);
        }
      };

      this.eventSource.onerror = () => {
        // Close the connection if it exists
        if (this.eventSource) {
          this.eventSource.close();
          this.eventSource = null;
        }

        // Attempt to reconnect after a delay
        setTimeout(() => this.setupLiveUpdates(), 5000);
      };
    }

    private setupSparkline() {
      this.trendBars = this.querySelector(".trend-bars");
      this.svgElement = this.querySelector(".visitor-trend");
      if (!this.trendBars || !this.svgElement) return;

      this.updateSparkline();
    }

    // Calculate SVG width dynamically based on bar width and gap
    private calculateSvgWidth(totalBars: number): number {
      return this.BAR_WIDTH * totalBars + this.BAR_GAP * (totalBars - 1);
    }

    private updateSparkline() {
      if (!this.trendBars || !this.svgElement) return;

      // Update SVG width based on number of bars
      const svgWidth = this.calculateSvgWidth(this.visitorHistory.length);
      this.svgElement.setAttribute("width", svgWidth.toString());

      // Calculate dimensions
      const height = 10; // height in pixels
      const MIN_HEIGHT = 2; // minimum height of a bar
      const maxValue = Math.max(...this.visitorHistory, 1); // Use 1 as minimum to avoid division by zero
      const startX = 0; // No need to center since SVG width is dynamic

      // Clear existing bars
      this.trendBars.innerHTML = "";

      // Create bars
      this.visitorHistory.forEach((point, idx) => {
        // Calculate height as percentage of max value
        const percentage = point / maxValue;
        const barHeight = Math.max(MIN_HEIGHT, height * percentage);
        const x = startX + idx * (this.BAR_WIDTH + this.BAR_GAP);
        const y = height - barHeight;

        const rect = document.createElementNS(
          "http://www.w3.org/2000/svg",
          "rect",
        );
        rect.setAttribute("x", x.toString());
        rect.setAttribute("y", y.toString());
        rect.setAttribute("width", this.BAR_WIDTH.toString());
        rect.setAttribute("height", barHeight.toString());
        rect.setAttribute("rx", "1");
        rect.setAttribute("fill", "currentColor");

        this.trendBars?.appendChild(rect);
      });
    }

    /**
     * Updates the visitor history with new data
     * @param history - Array of historical visitor counts from the API
     * @param currentCount - Current visitor count
     */
    updateVisitorHistory(
      history: number[] | undefined,
      currentCount: number,
    ): void {
      // If we have history from the API, use it
      if (history && Array.isArray(history) && history.length > 0) {
        this.visitorHistory = history;
      } else {
        // If no history provided, try to get initial data from the dataset
        const initialData = this.dataset.initialVisitors;
        if (initialData) {
          try {
            const parsed = JSON.parse(initialData);
            if (
              parsed.history &&
              Array.isArray(parsed.history) &&
              parsed.history.length > 0
            ) {
              this.visitorHistory = parsed.history;
              return;
            }
          } catch (error) {
            console.error("Failed to parse initial visitor data:", error);
          }
        }

        // Fallback to updating with just the current count
        this.visitorHistory = [...this.visitorHistory.slice(1), currentCount];
      }

      // Ensure we always have MAX_POINTS
      while (this.visitorHistory.length < this.MAX_POINTS) {
        this.visitorHistory.unshift(0);
      }
      while (this.visitorHistory.length > this.MAX_POINTS) {
        this.visitorHistory.pop();
      }
    }

    /**
     * Updates the active state of the visitors element based on count
     * @param count - Current visitor count
     */
    updateVisitorActiveState(count: number): void {
      const visitorsElement = this.querySelector("#visitors");
      if (visitorsElement) {
        visitorsElement.setAttribute("data-active", (count > 0).toString());
      }
    }

    connectedCallback() {
      const title = this.dataset.title;
      const totalChars = 17;
      const isActive = this.dataset.power === "on";

      if (title && title.length > totalChars && isActive) {
        this.timeoutId = setTimeout(
          () => this.scrollTitle(title, totalChars),
          100,
        );
      }

      // Update time display if there's an end time
      const timeElement = this.querySelector("time");
      if (timeElement?.getAttribute("datetime")) {
        this.updateTimeDisplay();
      }

      // Set up sparkline
      this.setupSparkline();

      // Set up live updates
      this.setupLiveUpdates();

      // Add visibility change listener
      document.addEventListener(
        "visibilitychange",
        this.handleVisibilityChange.bind(this),
      );
    }

    updateTimeDisplay() {
      const timeElement = this.querySelector("time");
      if (!timeElement) return;

      const timeStr = timeElement.getAttribute("datetime");
      if (!timeStr) return;

      // Parse the time string and convert to local time
      const [hours, minutes] = timeStr.split(":").map(Number);
      const date = new Date();
      date.setUTCHours(hours, minutes, 0, 0);

      // Format the time
      const formattedTime = date.toLocaleTimeString("en-US", {
        hour: "2-digit",
        minute: "2-digit",
        hour12: true,
      });

      // Update the time display
      timeElement.textContent = formattedTime.split(" ")[0];

      // Update AM/PM indicators
      const isAm = formattedTime.split(" ")[1] === "AM";
      const amElement = this.querySelector(".am-pm.am");
      const pmElement = this.querySelector(".am-pm.pm");

      if (amElement && pmElement) {
        amElement.setAttribute("data-active", isAm.toString());
        amElement.setAttribute("aria-hidden", (!isAm).toString());
        pmElement.setAttribute("data-active", (!isAm).toString());
        pmElement.setAttribute("aria-hidden", isAm.toString());
      }
    }

    handleVisibilityChange() {
      this.isOnline = document.visibilityState === "visible";
      if (this.isOnline) {
        this.setupLiveUpdates();
      }
    }

    disconnectedCallback() {
      this.clearTimers();

      if (this.eventSource) {
        this.eventSource.close();
        this.eventSource = null;
      }

      document.removeEventListener(
        "visibilitychange",
        this.handleVisibilityChange.bind(this),
      );
    }

    clearTimers() {
      if (this.intervalId !== null) {
        clearInterval(this.intervalId);
        this.intervalId = null;
      }
      if (this.timeoutId !== null) {
        clearTimeout(this.timeoutId);
        this.timeoutId = null;
      }
    }

    scrollTitle(title: string, totalChars: number) {
      const titleLink = this.querySelector(".title a");
      if (!titleLink) return;

      let startIndex = 0;
      let direction = 1; // 1 for right, -1 for left
      const maxIndex = Math.max(0, title.length - totalChars);
      let pauseCount = 0;
      const pauseDurationEnd = 8; // How many ticks to pause at each end
      const pauseDurationStart = 16;

      this.intervalId = setInterval(() => {
        if (pauseCount > 0) {
          pauseCount--;
          return;
        }

        const activeChars = title.slice(startIndex, startIndex + totalChars);
        titleLink.textContent = activeChars;

        if (
          (startIndex >= maxIndex && direction === 1) ||
          (startIndex <= 0 && direction === -1)
        ) {
          direction *= -1; // Reverse direction
          if (direction === 1) {
            pauseCount = pauseDurationStart;
          } else {
            pauseCount = pauseDurationEnd;
          }
          return;
        }

        startIndex += direction;
      }, 300);
    }
  }

  // Define the custom element
  customElements.define("channel-display", ChannelDisplay);
</script>

<style>
  @keyframes scroll-text {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-100%);
    }
  }

  @keyframes live-pulse {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
    100% {
      opacity: 1;
    }
  }

  .display {
    --phosphor-active: rgb(94, 191, 252);
    --phosphor-inactive: color-mix(
      in srgb,
      var(--phosphor-active) 15%,
      transparent
    );

    --phosphor-glow: 0 0 2px color-mix(in srgb, currentColor 50%, transparent),
      0 0 4px color-mix(in srgb, currentColor 40%, transparent),
      0 0 8px color-mix(in srgb, currentColor 30%, transparent);

    background: black;
    border-radius: 1rem;
    height: 4rem;
    width: 20.5rem;
    font-size: 1.3rem;
    padding-inline: 1.5ch;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: center;
    gap: 0.5rem;
    box-shadow: 0 2px 1px rgba(255, 255, 255, 0.1);
    user-select: none;
    line-height: 1;
    overflow: hidden;
    text-transform: uppercase;

    * {
      transition: all 0.3s ease-out;
    }

    a {
      color: var(--phosphor-active);
      text-decoration: none;
    }

    .title {
      font-family: "DSEG 14", monospace;
      font-weight: 400;
      color: var(--phosphor-active);
      text-shadow: var(--phosphor-glow);
      text-wrap: nowrap;
      line-height: 1;
      display: flex;
      align-items: center;
      gap: 0.5em;

      &[data-scroll="true"] a {
        white-space: pre;
      }

      a {
        border-radius: 0.2rem;
      }
    }

    .title-contents {
      position: absolute;
      z-index: 1;
    }

    .title-background {
      color: var(--phosphor-inactive);
      z-index: 0;
      pointer-events: none;
    }

    .secondary {
      color: color-mix(in srgb, var(--phosphor-active) 40%, transparent);
      font-size: 0.48em;
      margin-bottom: -0.4rem;
      display: flex;
      justify-content: space-between;
      width: 100%;
      letter-spacing: 0.1em;
      white-space: nowrap;
    }

    .airing {
      --phosphor-active: rgb(255, 100, 100);
      color: var(--phosphor-inactive);
      display: flex;
      align-items: center;
    }

    .airing-indicator {
      content: "";
      display: inline-block;
      width: 0.5em;
      height: 0.5em;
      background: var(--phosphor-inactive);
      border-radius: 50%;
      margin-right: 0.5em;
    }

    .airing-container {
      display: flex;
      align-items: center;
      gap: 0.5em;
    }

    .times {
      color: var(--phosphor-inactive);
    }

    [data-active="true"] {
      color: var(--phosphor-active);
      text-shadow: var(--phosphor-glow);

      .airing-indicator {
        background: var(--phosphor-active);
        box-shadow: var(--phosphor-glow);
        animation: live-pulse 3s ease infinite;
      }
    }

    #visitors {
      display: flex;
      align-items: center;
      gap: 0.5em;
    }

    .visitor-trend {
      overflow: visible;
      position: relative;
      /* Optical alignment */
      transform: translateY(2px);

      rect {
        transition: all 0.3s ease-out;
      }
    }
  }

  [data-power="off"] {
    .title-contents {
      opacity: 0;
      pointer-events: none;
    }

    [data-active="true"] {
      color: var(--phosphor-inactive);
      text-shadow: none;

      .airing-indicator {
        background: var(--phosphor-inactive);
        box-shadow: none;
        animation: none;
      }

      .visitor-trend rect {
        fill: var(--phosphor-inactive);
        filter: none;
      }
    }
  }

  #visitors[data-active="true"] {
    .visitor-trend rect {
      filter: drop-shadow(
          0 0 2px color-mix(in srgb, currentColor 30%, transparent)
        )
        drop-shadow(0 0 4px color-mix(in srgb, currentColor 20%, transparent))
        drop-shadow(0 0 8px color-mix(in srgb, currentColor 15%, transparent));
    }
  }
</style>
